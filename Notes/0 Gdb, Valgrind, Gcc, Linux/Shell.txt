Basic terminal
    missing:~$ : This shows you that you are on the machine missing, that you are not the rot directory because of the $

    If the shell is asked to execute a command that doesn’t match one of its programming keywords, it consults an environment variable called $PATH that lists which directories the shell should search for programs when it is given a command

    When we run the echo command, the shell sees that it should execute the program echo, and then searches through the :-separated list of directories in $PATH for a file by that name. When it finds it, it runs it (assuming the file is executable; more on that later). We can find out which file is executed for a given program name using the which program. We can also bypass $PATH entirely by giving the path to the file we want to execute.

Connecting programs
    In the shell, programs have two primary “streams” associated with them: their input stream and their output stream. When the program tries to read input, it reads from the input stream, and when it prints something, it prints to its output stream. Normally, a program’s input and output are both your terminal. That is, your keyboard as input and your screen as output.

    You can also use >> to append to a file. Where this kind of input/output redirection really shines is in the use of pipes. The | operator lets you “chain” programs such that the output of one is the input of another:

Root access allows you to do just about everything. 

System:
    Packages
        man : Takes an argument of the name of a program nd shows you a simplified doc
        dnf:
            sudo dnf update : Updates all packages and dependencies
            dnf repolist : Lists all installed repos
            remove : removes a package

    Directory work
        df -h : shows disk space
        cd : change directory
	        ~ moves into home directory
	        use ~ before typing the directory name to zoom into it
        ls : lists files
	        -a : lists hidden files
	        -l : lists long version of files
	        .. : lists files in parent folder
        clear : clears the terminal log
        reset : restarts the terminal
        rm : Removes a file
        pwd : Prints the current working directory
        tree : Prints out a tree directory of wherever you are
        exit : exits root user
        mv filename.c .. : moves a file
        cp : Copies a file
        mkdir : Makes a directory

Programs:
    Clamav anti virus
        sudo freshclam : Updates virus definitions
        clamscan -r / : Scans all files on computer, displaying each file

    RPM (package manager)
        rpm -i : Installs a package
        rpm -q : Checks whether or not something is installed
        rpm -qa : Shows all packages

    Vim (text editor)
        vim : Opens vim
        vim filename.type : Opens file in vim
        (while opened)
            :q<enter> : quits
            :help<enter>  : displays help
    
    Screen (terminal multiplexer)
        screen : starts screen
            -S [session_name] : Names a session.
            -r : Resumes screen
            -ls : Shows session IDs
            -S [session num] -X quit : Quits a screen session
        ctr+a (the basis for all screeen commands. Only usable when process is open)
            c : Opens a new screen
            ? : Opens commands
            " : Lists all windows
            0 : Switch to window by number (change number to go to that window)
            A : Rename the current window
            S : Splits window horizontally into two regions
            | : Splits the window vertically into two regions
            tab : Switch input focus to next regions
            ctr+a : Toggle between current and previous regions
            q : close all regions but current one
            x : Close the current region
            d : Detach from screen session
            c : Initializes a terminal in a region //important
    